#define VERBOSEDEBUG

using UnityEngine;
using System.Collections.Generic;

//v1.52
public enum TrackingEvent
{
    // standard events
    DEFAULT,
    CREATEPLAYER,
    START,              // launched the game
    END,                // quit the game

    // specific events
    // all screens
    CLICKLANGUAGE,          // using the UI button
    // debug
    PRESSLANGUAGE,          // using the keyboard shortcut
    PRESSCURRENCYCHEAT,     // using the keyboard shortcut
    PRESSWINCHEAT,          // using the keyboard shortcut
    PRESSLOSECHEAT,         // using the keyboard shortcut
    CLICKRESET,
    CLICKUNLOCK,

    // main screen
    CLICKPLAY,
    CLICKQUIT,

    // level selection screen
    CLICKLEVEL,
    CLICKBACK,

    // any level
    CLICKMENU,
    CLICKMENURESUME,
    CLICKMENUMENU,

    CLICKPAUSE,
    CLICKPAUSERESUME,

    CLICKRETRY,
    CLICKRETRYRESUME,
    CLICKRETRYRETRY,

    CLICKHELP,
    CLICKHELPON,

    CLICKNEXT,
    CLICKFOCUSHOLE,
    
    CLICKTILE,

    CLICKTOWER,
    CLICKTOWERSELL,
    CLICKTOWERUPGRADE,
    CLICKTOWERBUTTON,
    CLICKTOWERBUILD,

    COMPLETELEVEL,
    COMPLETE,           // successfully finished the game
    REACH,              // reached a new level
    NEWFURTHEST,        // reached a new furthest level
    NEWOWNRECORD,       // beat own best completion time on a level
    NEWWORLDRECORD,     // beat world best completion time on a level
    SWITCH,             // changed game level

    HINT,               // a hint message was displayed

    // main menu
    SELECTMENU,
    CONFIGURE,
    GOTOMOOC,
    GOTOSTUDY,
    GOTOURL,

    // alternative configuration routes
    WEBCONFIGURE,
    ADMINCONFIGURE,

    // backend events
    SWITCHFROMGAMEVERSION,
    SWITCHTOGAMEVERSION
}

//From https://github.com/CyberCRI/RedMetrics/blob/master/API.md
public abstract class TrackingEventData
{

    /* RedMetrics API
    
    userTime - Date sent by the game (optional)

    serverTime - Date generated by the server

    type - String

    customData - Any data structure. For "gain" and “lose” events, specifies the number of things are gained or lost.
    
   */

    //optional
    //date in ISO 8601 format
    public string userTime;
    //managed by RedMetrics server
    //Time serverTime;
    protected TrackingEvent innerEventType = TrackingEvent.DEFAULT;
    // set to public for json
    public string type = TrackingEvent.DEFAULT.ToString();
    //optional
    protected CustomData innerCustomData;
    // set to public for json
    public string customData;

    public void setEventType(string _eventType)
    {
        //internalTrackingEvent = TrackingEvent.DEFAULT;
        bool isSet = false;
        foreach (TrackingEvent _trackingEvent in System.Enum.GetValues(typeof(TrackingEvent)))
        {
            if (_trackingEvent.ToString() == _eventType)
            {
                innerEventType = _trackingEvent;
                type = _eventType;
                isSet = true;
                break;
            }
        }
        if (!isSet || (innerEventType == TrackingEvent.DEFAULT))
        {
            Debug.LogWarning("Issue with tracking event: '" + _eventType + "'");
        }
    }

    public void setEventType(TrackingEvent _eventType)
    {
        innerEventType = _eventType;
        type = innerEventType.ToString();
    }

    public void setCustomData(CustomData _customData)
    {
        innerCustomData = _customData;
        customData = (null == _customData || 0 == _customData.Count) ? "" : _customData.ToJSONString();
    }

    public TrackingEvent getEventType()
    {
        return innerEventType;
    }

    public TrackingEventData()
    {
    }

    public TrackingEventData(
        TrackingEvent _trackingEvent,
        CustomData _customData = null,
        string _userTime = null
    )
    {
        //cf http://stackoverflow.com/questions/114983/given-a-datetime-object-how-do-i-get-a-iso-8601-date-in-string-format/115002#115002
        userTime = string.IsNullOrEmpty(_userTime) ? System.DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture) : _userTime;

        setEventType(_trackingEvent);
        setCustomData(_customData);
    }

    public TrackingEventData(
        TrackingEventData data
    ) : this(data.innerEventType, data.innerCustomData, data.userTime)
    {
    }

    public override string ToString()
    {
        return string.Format("[TrackingEventData: userTime:{0}, type:{1}, customData:{2}]"
                          , userTime
                          , type
                          , customData
        );
    }
}

public enum CustomDataTag
{
    LOCALPLAYERGUID,    //for GUID stored in local PlayerPrefs
    GLOBALPLAYERGUID,   //for GUID associated to an account

    PLATFORM,           //the runtime platform on which the game is run

    SOURCE,             // source of event - webpage or game

    // event context
    LIVES,              // number of lives ie number of pathogens that can escape before losing
    FUNDS,              // money available to buy/upgrade towers
    RESISTANCE,         // resistance points accumulated when building towers
    WAVES,              // waves of pathogens that already happened
    GAMELEVEL,          // game level ie scenario, map being played

    OPTION,

    CONTROLS,
    LANGUAGE,
    GRAPHICS,
    SOUND,

    NEWTAB,
    SAMETAB,

    MESSAGE,            // hint message that was displayed

    DURATION
}

public enum CustomDataValue
{
    // sound states
    ON,
    OFF,

    // main menu entries
    START,
    RESUME,
    RESTART,
    SETTINGS,
    CONTROLS,
    LANGUAGE,
    GRAPHICS,
    SOUND,
    SCIENCE,
    LEARNMORE,
    CONTRIBUTE,
    QUIT,

    GAME,               // source of event: some events can be triggered from game or webpage
    WEBPAGE,
    QUITYES,
    QUITNO,
    CONTRIBUTEMAINMENU,
    CONTRIBUTEHUD,
    CONTRIBUTEEND,
    CONTRIBUTEQUIT,
    CONTRIBUTETOOLBAR,
    CONTRIBUTESPEECHBUBBLE,
    QUITCROSSMENU,
    QUITCROSSHUD,
    RESETCONFIGURATION,
}

public class CustomData : Dictionary<string, string>
{

    public CustomData()
    {
    }

    private CustomData(string key, string value) : base()
    {
        this.Add(key, value);
    }

    public CustomData(CustomDataTag tag, string value) : this(tag.ToString().ToLowerInvariant(), value)
    {

    }

    public void Add(CustomDataTag tag, string value)
    {
        Add(tag.ToString().ToLowerInvariant(), value);
    }

    /// <summary>
    /// Merges data into this.
    /// </summary>
    public void merge(CustomData data)
    {
        // Debug.Log(this.GetType() + " merge " + data + " into " + this);
        if (null != data)
        {
            foreach (KeyValuePair<string, string> pair in data)
            {
                if (this.ContainsKey(pair.Key))
                {
                    // this key was already present
                    // each key-value pair type needs a specific treatment
                    Debug.LogWarning(this.GetType() + " key " + pair.Key + " present in both CustomData objects " + data + " and " + this);
                }
                else
                {
                    // new key
                    this.Add(pair.Key, pair.Value);
                }
            }
        }
    }

    public string ToJSONString()
    {
        string content = "";
        foreach (KeyValuePair<string, string> entry in this)
        {
            if (!string.IsNullOrEmpty(content))
            {
                content += ",";
            }
            content += "\"" + entry.Key + "\":\"" + entry.Value + "\"";
        }
        return "{" + content + "}";
    }

    public override string ToString()
    {
        string content = "";
        foreach (KeyValuePair<string, string> entry in this)
        {
            if (!string.IsNullOrEmpty(content))
            {
                content += ",";
            }
            content += entry.Key + ":" + entry.Value;
        }
        return string.Format("[CustomData:[{0}]]", content);
    }
}

public class TrackingEventDataWithoutIDs : TrackingEventData
{
    public TrackingEventDataWithoutIDs(
        TrackingEvent _trackingEvent,
        CustomData _customData = null,
        string userTime = null
        ) : base(_trackingEvent, _customData, userTime)
    {
    }

    public override string ToString()
    {
        return string.Format("[TrackingEventDataWithoutIDs type:{0} customData:{1}]",
                              type, innerCustomData);
    }
}

public class TrackingEventDataWithIDs : TrackingEventData
{
    // the "player" in the sense of RedMetrics, ie a game session ID
    public string player;
    public string gameVersion;

    public TrackingEventDataWithIDs(
        string _playerGuid,
        string _gameVersionGuid,
        TrackingEvent _trackingEvent,
        CustomData _customData = null
    ) : base(_trackingEvent, _customData)
    {
        player = _playerGuid;
        gameVersion = _gameVersionGuid;

#if VERBOSEDEBUG
    Debug.Log(this.GetType() + " Ctor from strings " + ToString());
#endif
    }

    public TrackingEventDataWithIDs(
        System.Guid _playerGuid,
        System.Guid _gameVersionGuid,
        TrackingEvent _trackingEvent,
        CustomData _customData = null
    ) : base(_trackingEvent, _customData)
    {
        player = _playerGuid.ToString();
        gameVersion = _gameVersionGuid.ToString();

#if VERBOSEDEBUG
    Debug.Log(this.GetType() + " Ctor from System.Guids " + ToString());
#endif
    }

    public TrackingEventDataWithIDs(
        System.Guid _playerGuid,
        System.Guid _gameVersionGuid,
        TrackingEventDataWithoutIDs data
    ) : base(data)
    {
        player = _playerGuid.ToString();
        gameVersion = _gameVersionGuid.ToString();

#if VERBOSEDEBUG
    Debug.Log(this.GetType() + " Ctor from TrackingEventDataWithoutIDs " + ToString());
#endif
    }

    public override string ToString()
    {
        return string.Format("[TrackingEventDataWithIDs player[game session ID]:{0}, gameVersion[game version guid]:{1}, type[tracking event]:{2}, customData:{3}]",
                              player, gameVersion, type, innerCustomData);
    }
}

/* given up on TypedInfo <- CreatePlayerData
 * TypedInfo <- TrackingEventData
 * caused problems with JsonWriter: JsonException: 'TrackingEventDataWithIDs' already contains the field or alias name 'type'
LitJson.JsonMapper.AddObjectMetadata (System.Type type) (at Assets/UnityLitJson/JsonMapper.cs:242)

public class TypedInfo {
  public string type;

  public TypedInfo() {}

  public override string ToString ()
  {
    return string.Format ("[TypedInfo]");
  }
}
*/

public class CreatePlayerData
{
    public string type = (new TrackingEventDataWithoutIDs(TrackingEvent.CREATEPLAYER)).type;

    public override string ToString()
    {
        return string.Format("[CreatePlayerData: type: {0}]", type);
    }
}

public class ConnectionData
{
    public System.Guid gameVersionId;

    public ConnectionData(string id)
    {
        gameVersionId = new System.Guid(id);
    }

    public ConnectionData(System.Guid id)
    {
        gameVersionId = new System.Guid(id.ToByteArray());
    }

    public override string ToString()
    {
        return string.Format("[ConnectionData: gameVersionId: {0}]", gameVersionId);
    }
}